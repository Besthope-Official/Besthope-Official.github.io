<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Besthope&#39;s Blog</title>
  <icon>http://example.com/icon.png</icon>
  <subtitle>more than a tech blog :)</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-09T11:14:59.351Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Besthope</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建一个tiny-docker</title>
    <link href="http://example.com/2023/04/08/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAtiny-docker/"/>
    <id>http://example.com/2023/04/08/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAtiny-docker/</id>
    <published>2023-04-08T11:27:39.000Z</published>
    <updated>2023-04-09T11:14:59.351Z</updated>
    
    
    <summary type="html">&lt;p&gt;怎么理解Docker? 自己手搓一个.&lt;/p&gt;
&lt;p&gt;这不是吹牛, 实际上核心技术就 Kernel 里的 Namespace, CGroup, UnionFS.
实现一个 tiny-docker, 对于了解 OS 也是大有裨益的!&lt;/p&gt;
&lt;p&gt;多说无用, show me the code!&lt;/p&gt;</summary>
    
    
    
    <category term="小项目" scheme="http://example.com/categories/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Linux系统编程" scheme="http://example.com/tags/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>数理逻辑人话ver</title>
    <link href="http://example.com/2023/03/11/%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%E4%BA%BA%E8%AF%9Dver/"/>
    <id>http://example.com/2023/03/11/%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%E4%BA%BA%E8%AF%9Dver/</id>
    <published>2023-03-11T03:09:39.000Z</published>
    <updated>2023-04-22T03:07:14.797Z</updated>
    
    
    <summary type="html">&lt;p&gt;为了严谨性以及交流方便, 我们需要术语来描述问题: 这很好,
某些问题数学语言胜千言——但由terminology组成的句子经常会让人不知所云.
尤其对于数理逻辑, 因为是翻译文字所以句子看起来就更糟心了.
本身不是数学专业, 还要被符号定义纠缠半死. 想要明白问题的核心要义,
非得二次翻译不可, 但最后描述的事情却是显而易见的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is not what you read, but how you read it.——Richard Feynman&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一切在于你的理解:
是愿意如背古诗一般去背定义——事实上这也足够你做题了——还是&lt;em&gt;真真正正地&lt;/em&gt;去理解所描述的问题?
以及, 为什么要这么定义?&lt;/p&gt;</summary>
    
    
    
    <category term="离散数学" scheme="http://example.com/categories/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="离散数学" scheme="http://example.com/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数理逻辑" scheme="http://example.com/tags/%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>综合算法题</title>
    <link href="http://example.com/2023/03/04/%E7%BB%BC%E5%90%88%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>http://example.com/2023/03/04/%E7%BB%BC%E5%90%88%E7%AE%97%E6%B3%95%E9%A2%98/</id>
    <published>2023-03-04T06:36:20.000Z</published>
    <updated>2023-04-23T11:12:49.413Z</updated>
    
    
    <summary type="html">&lt;p&gt;收录一些平时做的比较综合的题目. 考察的知识点不止一点,
各种优化方式简直使出毕生所学.&lt;/p&gt;
&lt;p&gt;大概是蓝桥杯国赛, ACM银, 提高组以上难度, 是比赛你不会轻易去碰的题目,
讲解起来也是额外麻烦. 虽然说比赛能保证签到题全对就已经很了不起了,
但这种题目就像高考数学的压轴题, 还是要有所接触才能有所突破嘛.&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>把Python写成shell脚本</title>
    <link href="http://example.com/2023/02/26/%E6%8A%8APython%E5%86%99%E6%88%90%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    <id>http://example.com/2023/02/26/%E6%8A%8APython%E5%86%99%E6%88%90%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/</id>
    <published>2023-02-26T15:34:35.000Z</published>
    <updated>2023-02-26T17:03:37.465Z</updated>
    
    
    <summary type="html">&lt;p&gt;为什么 Shell 脚本要用 Python 来写!? UNIX用户痛骂这是大逆不道.&lt;/p&gt;
&lt;p&gt;比起 BAT/Bash 我更喜欢 Python 的语法, 高效又简洁, 想想看一个list
bash要怎么写. 有 os/sys 模块的存在完全可以把 Python
写成类shell脚本(本质即调用shell命令), 再加上 &lt;code&gt;pandas&lt;/code&gt;
等包更是让 Python 实用到一个新的高度(Windows干活干的多).&lt;/p&gt;
&lt;p&gt;当然, 工具就是顺手就好. 你喜欢用什么写就用什么写.&lt;/p&gt;
&lt;p&gt;不考虑更底层的应用. 别扯什么嵌入式驱动, C语言顶着你的脑门问: 师傅,
我是干什么的.&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>简单的数据结构</title>
    <link href="http://example.com/2023/02/25/%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2023/02/25/%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2023-02-25T15:29:08.000Z</published>
    <updated>2023-04-05T06:16:44.548Z</updated>
    
    
    <summary type="html">&lt;p&gt;做一个数据结构的小小总结. 其实数据结构和算法是不分家的, 例如
&lt;code&gt;1+1=2&lt;/code&gt; 是一个加法算法, 用到了整型的数据结构 &lt;a href=&quot;#fn1&quot;
class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.
你就说是不是吧.&lt;/p&gt;
&lt;p&gt;DSA课程/书本上更注重实现. 手搓一个泛型结构, 实现 &lt;code&gt;std&lt;/code&gt;
里头的一堆方法, 这不劝退谁劝退. 实现是为了更好理解原理.
不要被复杂的构造带偏了学习的方向! 我们实现的标准是: ANSI C 也能做到!&lt;/p&gt;
&lt;p&gt;剩下的内容: 怎么用STL来解决使用到特定数据结构的题目, i.e. 会做题.
但我们也懂原理!&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>AI时代的学习指南</title>
    <link href="http://example.com/2023/02/25/AI%E6%97%B6%E4%BB%A3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <id>http://example.com/2023/02/25/AI%E6%97%B6%E4%BB%A3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</id>
    <published>2023-02-25T12:35:18.000Z</published>
    <updated>2023-03-21T06:58:57.942Z</updated>
    
    
    <summary type="html">&lt;p&gt;日常刷知乎, 然后看到了这样一个问题: &lt;a
href=&quot;https://www.zhihu.com/question/585554274/&quot;&gt;沃顿商学院教授要求学生必须用
ChatGPT 写作业，应该如何正确看待 AI 带来的利弊？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前我也看到一些态度截然相反的高校. 说实在话, 反对历史必然的行为,
无异于杯水车薪, 想想 Luddite movement 也不会真正让我们重回原始社会,
闭关锁国的历史也不必再度经历; 至于使用工具是否会反噬自身,
只要在不侵害他人的利益下, 我想这个自由最好让步于个人,
想想你是怎么注册上了ChatGPT的账号. 最后,
这句话送给AI时代下学习一切的你和我:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拥抱变化要比拒绝变化简单的多.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="杂谈" scheme="http://example.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="杂谈" scheme="http://example.com/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="学习经验" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>保研, 相亲, 找工作——背后的稳定匹配问题</title>
    <link href="http://example.com/2023/02/06/%E7%A8%B3%E5%AE%9A%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98%E5%8F%8AGale-Shapley%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/02/06/%E7%A8%B3%E5%AE%9A%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98%E5%8F%8AGale-Shapley%E7%AE%97%E6%B3%95/</id>
    <published>2023-02-06T08:28:11.000Z</published>
    <updated>2023-02-25T16:12:42.761Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;稳定匹配问题&lt;/strong&gt;(Stable Matching Problem)最早出自 D.Gale
和 L.S.Sharpley
1962年发表在美国数学月刊上的一篇关于&lt;em&gt;大学录取和婚姻稳定&lt;/em&gt;的文章&lt;a
href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot;
role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. 解决这个问题的算法出奇地简单,
甚至是&lt;strong&gt;自我执行&lt;/strong&gt;(self-forcing)的——换言之,
不需要系统的调度, 就能获得令人满意的结果!&lt;/p&gt;
&lt;p&gt;本文重点陈述算法的正确性——作为离散数学中&lt;em&gt;逻辑命题与证明&lt;/em&gt;的简单应用.&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="离散数学" scheme="http://example.com/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>随感录</title>
    <link href="http://example.com/2023/01/28/%E9%9A%8F%E6%84%9F%E5%BD%95/"/>
    <id>http://example.com/2023/01/28/%E9%9A%8F%E6%84%9F%E5%BD%95/</id>
    <published>2023-01-28T14:41:17.000Z</published>
    <updated>2023-04-09T11:15:17.548Z</updated>
    
    
    <summary type="html">&lt;p&gt;记录不时的奇思妙想. 奇怪的梦, 无垠的呓语, 似非的感悟.
忙碌后的凝思会带给人宁静, 或许人的创作欲此刻迸发. 胡诌数句,
想想还是删去罢了.&lt;/p&gt;</summary>
    
    
    
    <category term="杂谈" scheme="http://example.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="杂谈" scheme="http://example.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>2023寒假每日一题</title>
    <link href="http://example.com/2023/01/14/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>http://example.com/2023/01/14/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2023-01-14T12:45:49.000Z</published>
    <updated>2023-01-31T15:04:35.166Z</updated>
    
    
    <summary type="html">&lt;p&gt;收录一些寒假做的题目. 题目来源: &lt;a
href=&quot;https://www.acwing.com/activity/content/introduction/2712/&quot;&gt;寒假每日一题2023&lt;/a&gt;
我才不是水题大师呢, 因为蒟蒻所以只能做这些入门题,
但实际上更水的题目已经被我筛掉了 (&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数论" scheme="http://example.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="枚举" scheme="http://example.com/tags/%E6%9E%9A%E4%B8%BE/"/>
    
    <category term="动态规划" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="贪心" scheme="http://example.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="差分" scheme="http://example.com/tags/%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>双指针算法</title>
    <link href="http://example.com/2023/01/13/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <id>http://example.com/2023/01/13/%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <published>2023-01-13T14:20:46.000Z</published>
    <updated>2023-02-25T16:05:00.224Z</updated>
    
    
    <summary type="html">&lt;p&gt;双指针核心要义是将含两层嵌套的朴素算法,
利用某种性质(例如单调性)将其优化成&lt;code&gt;O(n)&lt;/code&gt;的过程.
有种并发的感觉——一步能干两个人的事情, 就不要等另一个人干完再去做.&lt;/p&gt;
&lt;p&gt;双指针一般会结合其他数据结构或者算法一起使用.&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="双指针" scheme="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>简单的分治排序算法</title>
    <link href="http://example.com/2023/01/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/01/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-01-05T12:05:05.000Z</published>
    <updated>2023-02-25T16:24:22.528Z</updated>
    
    
    <summary type="html">&lt;p&gt;我们介绍两个基于分治且 &lt;code&gt;O(nlogn)&lt;/code&gt; 的排序算法:
快速排序和归并排序. 理解排序算法的最好方法是模拟, 手动模拟指针的移动,
感受数据是怎么逐渐变得有序的. 配合动图食用更佳.&lt;/p&gt;
&lt;p&gt;你可能会问: &lt;code&gt;std::sort&lt;/code&gt; 它不香吗? 答:
让你手搓是为了理解算法思想, 没让你去用. 顺便提防将来的面试官.&lt;/p&gt;
&lt;p&gt;两个算法困难的点在于边界分析. 算法导论就是干这个证明的.
不过正常人记模板就可以了 :)&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="分治" scheme="http://example.com/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="多路归并" scheme="http://example.com/tags/%E5%A4%9A%E8%B7%AF%E5%BD%92%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>2022年终总结</title>
    <link href="http://example.com/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2022-12-31T11:37:52.000Z</published>
    <updated>2023-02-25T16:20:23.844Z</updated>
    
    
    <summary type="html">&lt;p&gt;你会用什么关键字概括2022年呢...... 各种意义上的Twist. 人生的转折,
政策的转折, 世界的转折. 年初的时候还祝福今年诸事皆顺,
不过心意到了抽签抽到凶也没办法.&lt;/p&gt;</summary>
    
    
    
    <category term="杂谈" scheme="http://example.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="杂谈" scheme="http://example.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>新冠生存手册</title>
    <link href="http://example.com/2022/12/22/%E6%96%B0%E5%86%A0%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/"/>
    <id>http://example.com/2022/12/22/%E6%96%B0%E5%86%A0%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/</id>
    <published>2022-12-22T08:15:32.000Z</published>
    <updated>2023-01-04T05:56:52.745Z</updated>
    
    
    <summary type="html">&lt;p&gt;感染新冠快成每日打卡项目了. 每天都能刷到同学感染的信息,
&quot;今天又发了39度的烧&quot;——然而这并不是值得炫耀的一件事. 二阳化碳, 三阳开泰,
四阳方尊, 五阳电动车, 六阳魁首, 七阳化二锰, 八阳化二硫, 九阳豆浆机
如果能在全员感染的范围内存活下来, 那么你就是大赢.
我不相信染病后没有后遗症, 就算苟我也要撑到群体免疫快结束的时候.
提心吊胆地过着放开后的日子, 保持身处末世一般的警惕,
做好保护自己生命的职责.&lt;/p&gt;
&lt;p&gt;更新: 12.28 阳了 估计是舍友交叉感染的 Q:
有个一声不吭的舍友是怎样的一种感受? 被害惨了.&lt;/p&gt;</summary>
    
    
    
    <category term="杂谈" scheme="http://example.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="杂谈" scheme="http://example.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>前缀函数和KMP算法</title>
    <link href="http://example.com/2022/12/21/KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2022/12/21/KMP%E7%AE%97%E6%B3%95/</id>
    <published>2022-12-21T12:37:01.000Z</published>
    <updated>2023-03-11T01:56:04.034Z</updated>
    
    
    <summary type="html">&lt;p&gt;做期末大作业里面有个字符串匹配的问题, 用暴力算法做完觉得不够爽,
于是自找的麻烦.&lt;/p&gt;
&lt;p&gt;想用最简明的方式去解释这个较为抽象的算法! 事实上明白了一个道理:
缺乏数学的算法都是玄学, 只有数学证明了才能让人心服口服......&lt;/p&gt;
&lt;p&gt;就好像物理规律, 如果数学上证明了成立, 你会感到无比安心.
模拟样例终归比不了证明有说服力.&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="字符串" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>x86-64 汇编介绍</title>
    <link href="http://example.com/2022/12/17/x86-64%E6%B1%87%E7%BC%96%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2022/12/17/x86-64%E6%B1%87%E7%BC%96%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-12-17T10:49:22.000Z</published>
    <updated>2023-02-25T16:28:52.365Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;程序就是状态机。——jyy, on 2022 NJU OS Lecture 01&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话道出了程序的本质. 实际上, 如今的计算机本质上就是通用&lt;a
href=&quot;https://plato.stanford.edu/entries/turing-machine/&quot;&gt;图灵机&lt;/a&gt;,
而我们研究汇编语言就是研究程序在机器层面上的运行.&lt;/p&gt;
&lt;p&gt;程序的进行依赖于&lt;code&gt;rip&lt;/code&gt;寄存器,
它储存的值是当前运行的指令地址.
程序的进行实际上就是一条指令一条指令的移动(你可以在&lt;code&gt;gdb&lt;/code&gt;里随时监控&lt;code&gt;rip&lt;/code&gt;).
这和图灵机读写控制的方式本质上是一致的!&lt;/p&gt;</summary>
    
    
    
    <category term="CSAPP" scheme="http://example.com/categories/CSAPP/"/>
    
    
    <category term="汇编" scheme="http://example.com/tags/%E6%B1%87%E7%BC%96/"/>
    
    <category term="CSAPP" scheme="http://example.com/tags/CSAPP/"/>
    
    <category term="计算机系统" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
